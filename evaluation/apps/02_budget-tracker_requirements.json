{
  "app_name": "Budget & Spend Insights",
  "context": "Simple Budget & Spend Insights",
  "requirements": [
    {
      "id": "REQ-001",
      "description": "Display a dashboard summary showing total income, total expenses, and balance for the currently selected month.",
      "status": "met",
      "acceptance_criteria": [
        "Dashboard header shows current month totals immediately after app loads.",
        "Income and expense totals recalculate instantly after any transaction is saved, edited, or removed.",
        "Displayed balance equals total income minus total expenses for the selected month without rounding errors."
      ],
      "category": "functional",
      "priority": "high"
    },
    {
      "id": "REQ-002",
      "description": "Allow the user to add a new expense transaction through a modal form capturing amount, date, category, and memo.",
      "status": "met",
      "acceptance_criteria": [
        "Add transaction button opens an expense form overlay without navigating away.",
        "Expense form enforces required amount, date, and category fields before enabling save.",
        "Saving an expense appends it to the transaction list and updates monthly totals immediately."
      ],
      "category": "functional",
      "priority": "high"
    },
    {
      "id": "REQ-003",
      "description": "Allow the user to add income transactions that contribute to monthly income totals.",
      "status": "met",
      "acceptance_criteria": [
        "Income form allows selecting income type and entering amount, date, and memo.",
        "Saved income entries increase the monthly income total instantly.",
        "Income entries are visually distinguished from expenses in the transaction list."
      ],
      "category": "functional",
      "priority": "high"
    },
    {
      "id": "REQ-004",
      "description": "Allow the user to create custom expense categories that become available throughout the app.",
      "status": "met",
      "acceptance_criteria": [
        "Category selector displays default categories such as Groceries, Transport, and Entertainment.",
        "User can create a new category name from within the selector and have it saved for future use.",
        "Categories persist in localStorage and become available across all relevant forms after creation."
      ],
      "category": "functional",
      "priority": "medium"
    },
    {
      "id": "REQ-005",
      "description": "Provide month navigation controls to view previous and next month budgets without page reloads.",
      "status": "met",
      "acceptance_criteria": [
        "Month navigation control lets user move to previous and next months without page reload.",
        "Selecting a different month filters the transaction list to entries in that month.",
        "Selected month state persists across visits using localStorage."
      ],
      "category": "functional",
      "priority": "high"
    },
    {
      "id": "REQ-006",
      "description": "Maintain a transaction list sorted by date in descending order with clear formatting.",
      "status": "met",
      "acceptance_criteria": [
        "Transaction list displays both income and expenses in date-descending order.",
        "Each transaction row shows amount, category, memo, and type badge.",
        "Sorting automatically re-applies after every create, edit, or delete action."
      ],
      "category": "functional",
      "priority": "medium"
    },
    {
      "id": "REQ-007",
      "description": "Support inline editing of existing transactions to adjust details quickly.",
      "status": "met",
      "acceptance_criteria": [
        "Clicking edit on a transaction opens an inline form populated with existing values.",
        "Saving edits updates the transaction record and recalculates affected totals.",
        "Cancelling an edit restores the original transaction content without changes."
      ],
      "category": "functional",
      "priority": "high"
    },
    {
      "id": "REQ-008",
      "description": "Allow users to delete transactions with confirmation to prevent accidental loss.",
      "status": "met",
      "acceptance_criteria": [
        "Delete icon is visible on every transaction row.",
        "Selecting delete triggers a confirmation prompt before removal.",
        "Confirmed deletions remove the entry from list, chart, and storage immediately."
      ],
      "category": "functional",
      "priority": "high"
    },
    {
      "id": "REQ-009",
      "description": "Persist all transactions and settings using browser localStorage automatically.",
      "status": "met",
      "acceptance_criteria": [
        "All transactions and settings persist via window.localStorage after each save action.",
        "Reloading the app restores the last saved data automatically.",
        "Clearing browser storage removes data and the app presents an empty state."
      ],
      "category": "functional",
      "priority": "high"
    },
    {
      "id": "REQ-010",
      "description": "Provide a category filter allowing multi-selection to refine the transaction list and charts.",
      "status": "met",
      "acceptance_criteria": [
        "Category filter component allows selecting one or multiple categories simultaneously.",
        "Applying category filter narrows the transaction list to matching entries.",
        "Clearing the filter returns the list and chart to showing all categories."
      ],
      "category": "functional",
      "priority": "medium"
    },
    {
      "id": "REQ-011",
      "description": "Provide keyword search across transaction memos with real-time feedback.",
      "status": "met",
      "acceptance_criteria": [
        "Search box filters transactions in real time as the user types keywords.",
        "Search matches against memo text regardless of character casing.",
        "Emptying the search field restores the full transaction list."
      ],
      "category": "functional",
      "priority": "medium"
    },
    {
      "id": "REQ-012",
      "description": "Display a spending by category bar chart that reacts to the active data set.",
      "status": "met",
      "acceptance_criteria": [
        "Spending by category bar chart updates instantly when data changes.",
        "Each bar is labeled with category name and total amount.",
        "Chart respects active category filters and month selection."
      ],
      "category": "functional",
      "priority": "medium"
    },
    {
      "id": "REQ-013",
      "description": "Provide quick-add expense templates for frequent purchases.",
      "status": "partially_met",
      "acceptance_criteria": [
        "At least three quick-add buttons with predefined amounts are available on the expense form.",
        "Clicking a quick-add button prepopulates the expense amount and category fields.",
        "Users can customize the quick-add presets directly within the app interface."
      ],
      "category": "functional",
      "priority": "low"
    },
    {
      "id": "REQ-014",
      "description": "Allow users to set a monthly budget threshold per month.",
      "status": "met",
      "acceptance_criteria": [
        "Budget settings panel lets user input a monthly budget amount.",
        "Budget value is stored per month in localStorage.",
        "Budget amount is referenced by dashboards and warnings throughout the app."
      ],
      "category": "functional",
      "priority": "high"
    },
    {
      "id": "REQ-015",
      "description": "Display a warning when spending exceeds the configured monthly budget.",
      "status": "partially_met",
      "acceptance_criteria": [
        "When total expenses exceed the monthly budget, a warning banner appears above the dashboard.",
        "Warning banner lists the top overspending category contributing to the threshold breach.",
        "Banner reappears automatically if dismissed while overspending condition remains true."
      ],
      "category": "functional",
      "priority": "high"
    },
    {
      "id": "REQ-016",
      "description": "Allow users to customize category colors used in charts and badges.",
      "status": "met",
      "acceptance_criteria": [
        "Category settings allow selecting a custom color for each category via a color picker.",
        "Updated colors immediately affect the bar chart and transaction badges.",
        "Selected colors persist after app reloads."
      ],
      "category": "functional",
      "priority": "low"
    },
    {
      "id": "REQ-017",
      "description": "Generate insight summaries highlighting notable spending patterns.",
      "status": "met",
      "acceptance_criteria": [
        "Insights section identifies the highest spending category for the current month.",
        "Insights section highlights days with no spending streaks longer than three days.",
        "Insight text updates automatically with any transaction change."
      ],
      "category": "functional",
      "priority": "medium"
    },
    {
      "id": "REQ-018",
      "description": "Allow users to duplicate an existing transaction for faster entry of similar items.",
      "status": "partially_met",
      "acceptance_criteria": [
        "Duplicate action is accessible from each transaction row.",
        "Executing duplicate pre-fills a new transaction form with the original details and allows date adjustment before saving.",
        "User can change duplicated transaction type if desired before committing."
      ],
      "category": "functional",
      "priority": "low"
    },
    {
      "id": "REQ-019",
      "description": "Provide an undo option for recently deleted transactions within the session.",
      "status": "partially_met",
      "acceptance_criteria": [
        "After deleting a transaction, an undo toast appears with a 10-second countdown.",
        "Clicking undo restores the most recently deleted transaction to its prior position and recalculates totals.",
        "The undo mechanism maintains a stack of the last three deletions within the session."
      ],
      "category": "functional",
      "priority": "medium"
    },
    {
      "id": "REQ-020",
      "description": "Offer a view switcher between list-focused and insights-focused layouts.",
      "status": "met",
      "acceptance_criteria": [
        "View switcher toggles between 'List Focus' and 'Insights Focus' layouts.",
        "Selected view preference persists in localStorage and is applied on next visit.",
        "Both views retain access to core actions such as add transaction and filters."
      ],
      "category": "functional",
      "priority": "medium"
    },
    {
      "id": "REQ-021",
      "description": "Support tagging transactions with arbitrary labels and filtering by those tags.",
      "status": "partially_met",
      "acceptance_criteria": [
        "Transaction form allows entering multiple freeform tags for each entry.",
        "Tags display as chips on transaction rows and can be removed inline.",
        "Filter panel includes a tags filter that lets users view only transactions with selected tags."
      ],
      "category": "functional",
      "priority": "low"
    },
    {
      "id": "REQ-022",
      "description": "Provide a dynamic daily spending allowance suggestion based on remaining budget.",
      "status": "partially_met",
      "acceptance_criteria": [
        "App calculates daily spending allowance based on remaining budget and days left in month.",
        "Allowance updates immediately after adding or editing a transaction.",
        "Allowance banner suggests specific spending adjustments when the daily limit is exceeded."
      ],
      "category": "functional",
      "priority": "medium"
    },
    {
      "id": "REQ-023",
      "description": "Allow users to reset all stored data from a settings action.",
      "status": "met",
      "acceptance_criteria": [
        "Settings panel contains a 'Reset all data' button.",
        "Reset action prompts user for confirmation before proceeding.",
        "Confirmed reset clears localStorage and reloads the app to an initial empty state."
      ],
      "category": "functional",
      "priority": "low"
    },
    {
      "id": "REQ-024",
      "description": "Display the average daily expense value for the selected month.",
      "status": "met",
      "acceptance_criteria": [
        "Dashboard displays the average daily expense for the selected month.",
        "Average recalculates after any transaction change.",
        "Average excludes income transactions from its computation."
      ],
      "category": "functional",
      "priority": "medium"
    },
    {
      "id": "REQ-025",
      "description": "Allow users to create and switch between multiple personal budget profiles.",
      "status": "not_met",
      "acceptance_criteria": [
        "User can create separate budget profiles each with isolated data.",
        "Profile switcher allows swapping between profiles without page reload.",
        "Active profile selection persists across sessions."
      ],
      "category": "functional",
      "priority": "low"
    },
    {
      "id": "REQ-026",
      "description": "Support recurring transactions that auto-populate future months based on frequency.",
      "status": "not_met",
      "acceptance_criteria": [
        "Users can mark transactions as recurring with a repeat frequency.",
        "System auto-generates future instances on the first load of each month.",
        "Users can pause or cancel a recurring series from a management view."
      ],
      "category": "functional",
      "priority": "medium"
    },
    {
      "id": "REQ-027",
      "description": "Provide a print-friendly monthly summary view.",
      "status": "not_met",
      "acceptance_criteria": [
        "Printable view button opens a print-friendly summary in a new window.",
        "Printable summary includes totals, charts, and list formatted for A4.",
        "Button triggers browser print dialog with pre-filled document title."
      ],
      "category": "functional",
      "priority": "low"
    },
    {
      "id": "REQ-028",
      "description": "Enable natural language input for adding transactions via typed sentences.",
      "status": "not_met",
      "acceptance_criteria": [
        "Users can enter phrases like 'Spent 12 on lunch yesterday' into a dedicated input.",
        "System parses amount, category, and date from natural language without additional prompts.",
        "Parsed transaction preview appears for confirmation before saving."
      ],
      "category": "functional",
      "priority": "medium"
    },
    {
      "id": "REQ-029",
      "description": "Allow drag-and-drop reordering of categories to influence list and chart order.",
      "status": "not_met",
      "acceptance_criteria": [
        "Category management view lists categories as draggable items.",
        "Dragging categories reorders them and updates ordering in all dropdowns.",
        "New order persists across sessions via localStorage."
      ],
      "category": "functional",
      "priority": "low"
    },
    {
      "id": "REQ-030",
      "description": "Provide automatic currency conversion for foreign currency transactions.",
      "status": "not_met",
      "acceptance_criteria": [
        "Expense form allows selecting a foreign currency code.",
        "System fetches up-to-date exchange rate and converts amount to base currency.",
        "Converted amount and original currency details display in transaction entry."
      ],
      "category": "functional",
      "priority": "medium"
    }
  ]
}