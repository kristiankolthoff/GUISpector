{
  "app_name": "Park & Pay",
  "context": "City Parking Finder & Pay",
  "requirements": [
    {
      "id": "REQ-001",
      "description": "App shall load with a combined map and list of nearby parking options sourced from seeded city data.",
      "status": "met",
      "acceptance_criteria": [
        "When the prototype loads, a default city map view is displayed with parking markers.",
        "Parking list panel is populated automatically with at least five seeded parking options.",
        "No user interaction is required to see initial parking options in both map and list."
      ],
      "category": "functional",
      "priority": "high"
    },
    {
      "id": "REQ-002",
      "description": "A toggle control shall allow users to switch between combined map-plus-list view and full-screen list view.",
      "status": "met",
      "acceptance_criteria": [
        "Toggle button labeled 'Map/List' is visible on the primary toolbar.",
        "Clicking the toggle hides the map and expands the list view to full width.",
        "Clicking the toggle again restores the combined map and list layout without page reload."
      ],
      "category": "functional",
      "priority": "high"
    },
    {
      "id": "REQ-003",
      "description": "Search field shall allow users to locate parking options by entering an address or landmark.",
      "status": "met",
      "acceptance_criteria": [
        "Search field accepts free-text input of at least three characters.",
        "Submitting a search filters the list to entries matching address or landmark keywords.",
        "Map re-centers to the first matching parking location after search submission."
      ],
      "category": "functional",
      "priority": "high"
    },
    {
      "id": "REQ-004",
      "description": "App shall provide a price range slider to narrow parking options by hourly rate.",
      "status": "met",
      "acceptance_criteria": [
        "Price slider allows selection of minimum and maximum hourly rate values.",
        "Adjusting the slider updates the parking list to show only entries within the selected price range.",
        "Map markers for filtered-out spots are visually muted or hidden after slider adjustments."
      ],
      "category": "functional",
      "priority": "medium"
    },
    {
      "id": "REQ-005",
      "description": "Users shall be able to filter parking options by vehicle type such as Standard, EV, or Motorcycle.",
      "status": "met",
      "acceptance_criteria": [
        "Vehicle type filter displays options for Standard, EV, and Motorcycle.",
        "Selecting a vehicle type updates the list to show only compatible spots.",
        "Filter selection persists while the user navigates between map and detail views during the session."
      ],
      "category": "functional",
      "priority": "medium"
    },
    {
      "id": "REQ-006",
      "description": "Each parking entry shall display its current availability status using color-coded badges.",
      "status": "met",
      "acceptance_criteria": [
        "Parking cards show a status badge such as 'Open', 'Filling', or 'Full'.",
        "Status badge colors correspond to the legend displayed on screen.",
        "Status values originate from seeded availability data and appear both on list items and map markers."
      ],
      "category": "functional",
      "priority": "high"
    },
    {
      "id": "REQ-007",
      "description": "Selecting a parking entry shall open a detail panel with comprehensive spot information.",
      "status": "met",
      "acceptance_criteria": [
        "Clicking a list item opens a detail panel without navigating away from the main screen.",
        "Detail panel shows hourly rate, operating hours, maximum duration, and full address.",
        "Panel includes a button to initiate the reservation process."
      ],
      "category": "functional",
      "priority": "high"
    },
    {
      "id": "REQ-008",
      "description": "App shall allow the user to create a parking reservation stored in browser local storage.",
      "status": "met",
      "acceptance_criteria": [
        "Reservation form collects date, start time, duration, and selected spot identifier.",
        "Submitting a valid form creates a reservation entry persisted in local storage.",
        "Confirmation view reflects reservation details immediately after submission."
      ],
      "category": "functional",
      "priority": "high"
    },
    {
      "id": "REQ-009",
      "description": "User shall be able to cancel an active reservation via the reservation management view.",
      "status": "met",
      "acceptance_criteria": [
        "Active reservation section shows the current booking with a cancel action.",
        "Selecting cancel prompts confirmation to prevent accidental removal.",
        "Upon confirmation, reservation data is removed from local storage and the UI updates to show no active reservation."
      ],
      "category": "functional",
      "priority": "high"
    },
    {
      "id": "REQ-010",
      "description": "App shall display a live countdown timer for the upcoming reservation start time.",
      "status": "partially_met",
      "acceptance_criteria": [
        "Countdown timer shows time remaining until reservation start in minutes and seconds.",
        "Timer updates automatically at least once per second without page reload.",
        "Timer stops at zero and changes status to 'Active Now'."
      ],
      "category": "functional",
      "priority": "medium"
    },
    {
      "id": "REQ-011",
      "description": "App shall provide step-by-step walking directions preview from current location to the selected parking spot.",
      "status": "met",
      "acceptance_criteria": [
        "Detail panel includes a 'Directions' action button.",
        "Upon activation, directions view lists sequential steps leading to the spot.",
        "Directions can be dismissed to return to the detail panel without losing context."
      ],
      "category": "functional",
      "priority": "medium"
    },
    {
      "id": "REQ-012",
      "description": "App shall simulate payment checkout to confirm reservation charges.",
      "status": "met",
      "acceptance_criteria": [
        "Checkout modal collects name on card, card number, expiry, and CVV fields with validation.",
        "Submitting valid payment details shows a confirmation with summarized charges.",
        "Invalid or incomplete payment fields display inline validation messages and block submission."
      ],
      "category": "functional",
      "priority": "high"
    },
    {
      "id": "REQ-013",
      "description": "App shall maintain a reservation history list stored in local storage.",
      "status": "met",
      "acceptance_criteria": [
        "Previous reservations persist across sessions via local storage.",
        "History view lists spot name, date, duration, and amount paid.",
        "User can clear history via dedicated control which wipes the local storage entries."
      ],
      "category": "functional",
      "priority": "medium"
    },
    {
      "id": "REQ-014",
      "description": "Users shall be able to add and remove parking spots from a favorites list.",
      "status": "met",
      "acceptance_criteria": [
        "Each parking card includes a favorite toggle control.",
        "Selected favorites appear in a dedicated favorites section.",
        "Removing a favorite updates both the favorites list and the original card indicator instantly."
      ],
      "category": "functional",
      "priority": "medium"
    },
    {
      "id": "REQ-015",
      "description": "App shall display zone-specific parking regulations within the spot detail panel.",
      "status": "met",
      "acceptance_criteria": [
        "Detail panel includes a regulation summary specific to the selected parking zone.",
        "Regulation summary covers maximum duration, permit requirements, and enforcement hours.",
        "Regulation content updates when the user switches between different parking spots."
      ],
      "category": "functional",
      "priority": "medium"
    },
    {
      "id": "REQ-016",
      "description": "App shall present an onboarding tutorial overlay highlighting key controls on the first visit.",
      "status": "met",
      "acceptance_criteria": [
        "On first load with no tutorial completion flag, an overlay appears dimming the main UI.",
        "Overlay sequences through at least three tips with 'Next' and 'Skip' controls.",
        "Completing or skipping the tutorial sets a flag in local storage to prevent repeat display."
      ],
      "category": "functional",
      "priority": "low"
    },
    {
      "id": "REQ-017",
      "description": "Parking list shall support sorting by price and by estimated walking distance.",
      "status": "met",
      "acceptance_criteria": [
        "Sort control includes options 'Price: Low to High' and 'Distance: Near to Far'.",
        "Selecting a sort option reorders the list accordingly using seeded metrics.",
        "Sort selection remains active until the user changes or resets it in the current session."
      ],
      "category": "functional",
      "priority": "medium"
    },
    {
      "id": "REQ-018",
      "description": "App shall display a mock occupancy trend chart for the selected parking spot.",
      "status": "met",
      "acceptance_criteria": [
        "Detail view includes a mini chart element with hourly occupancy percentages.",
        "Chart updates to reflect data for the newly selected spot.",
        "Chart includes a legend showing the meaning of axes and colors."
      ],
      "category": "functional",
      "priority": "low"
    },
    {
      "id": "REQ-019",
      "description": "Users shall manage a primary vehicle profile for reservation defaults.",
      "status": "met",
      "acceptance_criteria": [
        "Profile drawer allows entry of vehicle nickname, type, and license plate.",
        "Saved vehicle data persists in local storage and auto-populates reservation forms.",
        "Users can update vehicle information and see instant confirmation of changes."
      ],
      "category": "functional",
      "priority": "medium"
    },
    {
      "id": "REQ-020",
      "description": "App shall generate a shareable deep-link that reopens the app with the reserved spot preselected.",
      "status": "partially_met",
      "acceptance_criteria": [
        "After reservation, share action produces a URL containing the spot identifier.",
        "Copying or sharing the URL preserves it to the clipboard or device share sheet.",
        "Opening the generated URL preloads the app state to focus on the reserved spot."
      ],
      "category": "functional",
      "priority": "medium"
    },
    {
      "id": "REQ-021",
      "description": "App shall support scheduling reservations for any future date within 30 days.",
      "status": "partially_met",
      "acceptance_criteria": [
        "Date picker allows selection up to 30 days ahead.",
        "Selected future date is stored with the reservation confirmation.",
        "Availability validation confirms the spot is reservable on the chosen future date before submission."
      ],
      "category": "functional",
      "priority": "medium"
    },
    {
      "id": "REQ-022",
      "description": "Dragging the map shall refresh the parking list based on the map's current viewport.",
      "status": "partially_met",
      "acceptance_criteria": [
        "User can drag or zoom the map canvas freely.",
        "Once the map settles, the parking list updates to spots within the new viewport automatically.",
        "List update occurs without requiring a manual refresh button."
      ],
      "category": "functional",
      "priority": "medium"
    },
    {
      "id": "REQ-023",
      "description": "Checkout flow shall allow entry of promo codes to apply discounts to parking charges.",
      "status": "partially_met",
      "acceptance_criteria": [
        "Promo code input accepts at least six-character codes.",
        "Valid promo code reduces the displayed total before the user confirms payment.",
        "Invalid promo codes display a clear error message without clearing the entered code."
      ],
      "category": "functional",
      "priority": "medium"
    },
    {
      "id": "REQ-024",
      "description": "App shall produce a downloadable parking receipt file for each completed reservation.",
      "status": "partially_met",
      "acceptance_criteria": [
        "After payment confirmation, user can tap a 'Download Receipt' action.",
        "Action generates a PDF or equivalent document with reservation and payment details.",
        "Receipt file saves to the user's device via standard browser download prompt."
      ],
      "category": "functional",
      "priority": "low"
    },
    {
      "id": "REQ-025",
      "description": "App shall automatically refresh parking availability statuses every 60 seconds without user input.",
      "status": "not_met",
      "acceptance_criteria": [
        "Background timer triggers availability refresh every 60 seconds.",
        "Refreshed availability updates list and map indicators seamlessly.",
        "User receives a subtle toast indicating auto-refresh occurred."
      ],
      "category": "functional",
      "priority": "high"
    },
    {
      "id": "REQ-026",
      "description": "App shall verify resident parking permits by connecting to the municipal permit API before confirming reservation.",
      "status": "not_met",
      "acceptance_criteria": [
        "Reservation form includes a permit number field when the zone requires it.",
        "Upon submission, the app calls the municipal API to validate permit status.",
        "Reservation confirmation is blocked if permit validation fails."
      ],
      "category": "functional",
      "priority": "high"
    },
    {
      "id": "REQ-027",
      "description": "App shall send browser push notifications reminding users 15 minutes before the parking session ends.",
      "status": "not_met",
      "acceptance_criteria": [
        "On reservation confirmation, user is prompted to enable notifications.",
        "If enabled, service schedules a push notification for 15 minutes before end time.",
        "Notification includes spot name and link to extend the session."
      ],
      "category": "functional",
      "priority": "medium"
    },
    {
      "id": "REQ-028",
      "description": "App shall allow users to scan their license plate via device camera to auto-fill vehicle information.",
      "status": "not_met",
      "acceptance_criteria": [
        "Vehicle profile view offers a 'Scan Plate' option using the device camera.",
        "Captured image is processed to recognize plate characters.",
        "Recognized plate auto-populates corresponding input fields with an option to edit."
      ],
      "category": "functional",
      "priority": "medium"
    },
    {
      "id": "REQ-029",
      "description": "App shall provide an offline mode showing last-synced parking data when network is unavailable.",
      "status": "not_met",
      "acceptance_criteria": [
        "When offline, app detects connectivity loss and switches to an offline banner.",
        "Last cached parking list and map tiles remain accessible during offline state.",
        "App queues user actions made offline and syncs them once connection restores."
      ],
      "category": "functional",
      "priority": "medium"
    },
    {
      "id": "REQ-030",
      "description": "App shall offer a language toggle between English and Spanish across all user-facing text.",
      "status": "not_met",
      "acceptance_criteria": [
        "Language selector control is accessible from the main menu.",
        "Switching to Spanish updates labels, buttons, and content text immediately.",
        "Language selection persists across sessions and applies to tutorial messages."
      ],
      "category": "functional",
      "priority": "medium"
    }
  ]
}